var e;var t,r;var a;var n;var o=3e3;var i;var s=0;window.onload=function(){h()};function h(){u("three-container");E();i=f();requestAnimationFrame(c);window.addEventListener("resize",d,false)}function u(a){r=new THREE.WebGLRenderer({antialias:false,alpha:true});r.setSize(window.innerWidth,window.innerHeight);e=document.getElementById(a);e.appendChild(r.domElement);t=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.5,1e3);t.position.set(20,100,400);n=new THREE.Scene;n.background=new THREE.Color(16711680);var o;o=new THREE.SpotLight(16777215,4,1600,Math.PI*.15,24,2);o.position.set(0,1e3,0);n.add(o)}function E(){a=new THREE.OrbitControls(t,r.domElement);a.enabled=false;a.target.y=300}function f(){var e=new THREE.SphereGeometry(10,2,2,0,1,1,.5);var t=new THREE.BAS.PrefabBufferGeometry(e,o);t.computeVertexNormals();var r=t.createAttribute("aDelayDuration",2);var a=t.createAttribute("aStartPosition",3);var i=t.createAttribute("aControlPoint1",3);var s=t.createAttribute("aControlPoint2",3);var h=t.createAttribute("aEndPosition",3);var u=t.createAttribute("a_axis_angle",4);var E=t.createAttribute("color",3);var f,c,l;var v;var d;for(f=0,l=0;f<o;f++){v=THREE.Math.randFloat(0,20);d=THREE.Math.randFloat(20,28);for(c=0;c<e.vertices.length;c++){r.array[l++]=v;r.array[l++]=d}}var m,p,_;for(f=0,l=0;f<o;f++){m=THREE.Math.randFloat(-100,100);p=THREE.Math.randFloat(600,1e3);_=THREE.Math.randFloat(-100,100);for(c=0;c<e.vertices.length;c++){i.array[l++]=m;i.array[l++]=p;i.array[l++]=_}}for(f=0,l=0;f<o;f++){m=THREE.Math.randFloat(-800,800);p=THREE.Math.randFloat(200,1e3);_=THREE.Math.randFloat(-800,800);for(c=0;c<e.vertices.length;c++){s.array[l++]=m;s.array[l++]=p;s.array[l++]=_}}for(f=0,l=0;f<o;f++){m=THREE.Math.randFloatSpread(1e3);p=0;_=THREE.Math.randFloatSpread(1e3);for(c=0;c<e.vertices.length;c++){h.array[l++]=m;h.array[l++]=p;h.array[l++]=_}}var T=new THREE.Vector3;var y=0;for(f=0,l=0;f<o;f++){T.x=THREE.Math.randFloatSpread(2);T.y=THREE.Math.randFloatSpread(2);T.z=THREE.Math.randFloatSpread(2);T.normalize();y=Math.PI*THREE.Math.randInt(8,16)+Math.PI*.5;for(c=0;c<e.vertices.length;c++){u.array[l++]=T.x;u.array[l++]=T.y;u.array[l++]=T.z;u.array[l++]=y}}var H=new THREE.Color;var R,b,S;for(f=0,l=0;f<o;f++){R=.894;b=.66;S=.43;H.setHSL(R,b,S);for(c=0;c<e.vertices.length;c++){E.array[l++]=H.r;E.array[l++]=H.g;E.array[l++]=H.b}}var A=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.SmoothShading,side:THREE.DoubleSide,uniforms:{uTime:{type:"f",value:0}},shader_functions:[THREE.BAS.ShaderChunk["quaternion_rotation"],THREE.BAS.ShaderChunk["cubic_bezier"],THREE.BAS.ShaderChunk["ease_out_cubic"]],shader_parameters:["uniform float uTime;","attribute vec2 aDelayDuration;","attribute vec3 aStartPosition;","attribute vec3 aControlPoint1;","attribute vec3 aControlPoint2;","attribute vec3 aEndPosition;","attribute vec4 a_axis_angle;"],shader_vertex_init:["float tDelay = aDelayDuration.x;","float tDuration = aDelayDuration.y;","float tTime = mod(uTime - tDelay, tDuration);","float tProgress = ease(tTime, 0.0, 1.0, tDuration);","float angle = a_axis_angle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(a_axis_angle.xyz, angle);"],shader_transform_normal:["objectNormal = rotateVector(tQuat, objectNormal);"],shader_transform_position:["transformed = rotateVector(tQuat, transformed);","transformed += cubicBezier(aStartPosition, aControlPoint1, aControlPoint2, aEndPosition, tProgress);"]},{shininess:20});var g=new THREE.Mesh(t,A);g.frustumCulled=false;n.add(g);return g}function c(){l();v();s+=1/60;requestAnimationFrame(c)}function l(){a.update();i.material.uniforms["uTime"].value=s}function v(){r.render(n,t)}function d(){t.aspect=window.innerWidth/window.innerHeight;t.updateProjectionMatrix();r.setSize(window.innerWidth,window.innerHeight)}THREE.BAS={};THREE.BAS.ShaderChunk={};THREE.BAS.ShaderChunk["animation_time"]="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = (uTime - tDelay) % tDuration;\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n";THREE.BAS.ShaderChunk["cubic_bezier"]="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n";THREE.BAS.ShaderChunk["ease_in_cubic"]="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n";THREE.BAS.ShaderChunk["ease_in_quad"]="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n";THREE.BAS.ShaderChunk["ease_out_cubic"]="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n";THREE.BAS.ShaderChunk["quaternion_rotation"]="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n";THREE.BAS.PrefabBufferGeometry=function(e,t){THREE.BufferGeometry.call(this);this.prefab_geometry=e;this.prefab_count=t;this.prefab_vertex_count=e.vertices.length;this.bufferDefaults()};THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry;THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){var e=this.prefab_geometry.faces.length;var t=this.prefab_geometry.faces.length*3;var r=this.prefab_vertex_count=this.prefab_geometry.vertices.length;var a=[];for(var n=0;n<e;n++){var o=this.prefab_geometry.faces[n];a.push(o.a,o.b,o.c)}var i=new Uint32Array(this.prefab_count*t);var s=new Float32Array(this.prefab_count*r*3);this.setIndex(new THREE.BufferAttribute(i,1));this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var h=0,u=0;h<this.prefab_count;h++){for(var E=0;E<r;E++,u+=3){var f=this.prefab_geometry.vertices[E];s[u]=f.x;s[u+1]=f.y;s[u+2]=f.z}for(var c=0;c<t;c++){i[h*t+c]=a[c]+h*r}}};THREE.BAS.PrefabBufferGeometry.prototype.bufferUvs=function(){var e=this.prefab_geometry.faces.length;var t=this.prefab_vertex_count=this.prefab_geometry.vertices.length;var r=[];for(var a=0;a<e;a++){var n=this.prefab_geometry.faces[a];var o=this.prefab_geometry.faceVertexUvs[0][a];r[n.a]=o[0];r[n.b]=o[1];r[n.c]=o[2]}var i=this.createAttribute("uv",2);for(var s=0,h=0;s<this.prefab_count;s++){for(var u=0;u<t;u++,h+=2){var E=r[u];i.array[h]=E.x;i.array[h+1]=E.y}}};THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var e=this.index;var t=this.attributes;var r=t.position.array;if(t.normal===undefined){this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3))}var a=t.normal.array;var n,o,i,s=new THREE.Vector3,h=new THREE.Vector3,u=new THREE.Vector3,E=new THREE.Vector3,f=new THREE.Vector3;var c=e.array;var l=this.prefab_geometry.faces.length*3;for(var v=0;v<l;v+=3){n=c[v+0]*3;o=c[v+1]*3;i=c[v+2]*3;s.fromArray(r,n);h.fromArray(r,o);u.fromArray(r,i);E.subVectors(u,h);f.subVectors(s,h);E.cross(f);a[n]+=E.x;a[n+1]+=E.y;a[n+2]+=E.z;a[o]+=E.x;a[o+1]+=E.y;a[o+2]+=E.z;a[i]+=E.x;a[i+1]+=E.y;a[i+2]+=E.z}for(var d=1;d<this.prefab_count;d++){for(var m=0;m<l;m++){a[d*l+m]=a[m]}}this.normalizeNormals();t.normal.needs_update=true};THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(e,t){var r=new Float32Array(this.prefab_count*this.prefab_vertex_count*t);var a=new THREE.BufferAttribute(r,t);this.addAttribute(e,a);return a};THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(e,t){var r=0;var a=this.geometry.attributes[e].array;var n,o;for(n=0;n<t.length;n++){var i=t[n];for(o=0;o<this.prefab_vertex_count;o++){a[r++]=i.x;a[r++]=i.y;a[r++]=i.z;a[r++]=i.w}}this.geometry.attributes[e].needs_update=true};THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(e,t){var r=0;var a=this.geometry.attributes[e].array;var n,o;for(n=0;n<t.length;n++){var i=t[n];for(o=0;o<this.prefab_vertex_count;o++){a[r++]=i.x;a[r++]=i.y;a[r++]=i.z}}this.geometry.attributes[e].needs_update=true};THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(e,t){var r=0;var a=this.geometry.attributes[e].array;var n,o;for(n=0;n<this.prefab_count;n++){var i=t[n];for(o=0;o<this.prefab_vertex_count;o++){a[r++]=i.x;a[r++]=i.y}}this.geometry.attributes[e].needs_update=true};THREE.BAS.BaseAnimationMaterial=function(e){THREE.ShaderMaterial.call(this);this.shader_functions=[];this.shader_parameters=[];this.shader_vertex_init=[];this.shader_transform_normal=[];this.shader_transform_position=[];this.setValues(e)};THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype);THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial;THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""};THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shader_functions.join("\n")};THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shader_parameters.join("\n")};THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shader_vertex_init.join("\n")};THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shader_transform_normal.join("\n")};THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shader_transform_position.join("\n")};THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(e){for(var t in e){if(t in this.uniforms){var r=this.uniforms[t];var a=e[t];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":r.value=a}}}};THREE.BAS.PhongAnimationMaterial=function(e,t){THREE.BAS.BaseAnimationMaterial.call(this,e);var r=THREE.ShaderLib["phong"];this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]);this.lights=true;this.vertexShader=this._concatVertexShader();this.fragmentShader=r.fragmentShader;t.map&&(this.defines["USE_MAP"]="");t.normalMap&&(this.defines["USE_NORMALMAP"]="");this.setUniformValues(t)};THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype);THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial;THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk["common"],THREE.ShaderChunk["uv_pars_vertex"],THREE.ShaderChunk["uv2_pars_vertex"],THREE.ShaderChunk["displacementmap_pars_vertex"],THREE.ShaderChunk["envmap_pars_vertex"],THREE.ShaderChunk["lights_phong_pars_vertex"],THREE.ShaderChunk["color_pars_vertex"],THREE.ShaderChunk["morphtarget_pars_vertex"],THREE.ShaderChunk["skinning_pars_vertex"],THREE.ShaderChunk["shadowmap_pars_vertex"],THREE.ShaderChunk["logdepthbuf_pars_vertex"],this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk["uv_vertex"],THREE.ShaderChunk["uv2_vertex"],THREE.ShaderChunk["color_vertex"],THREE.ShaderChunk["beginnormal_vertex"],this._concatTransformNormal(),THREE.ShaderChunk["morphnormal_vertex"],THREE.ShaderChunk["skinbase_vertex"],THREE.ShaderChunk["skinnormal_vertex"],THREE.ShaderChunk["defaultnormal_vertex"],"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk["begin_vertex"],this._concatTransformPosition(),THREE.ShaderChunk["displacementmap_vertex"],THREE.ShaderChunk["morphtarget_vertex"],THREE.ShaderChunk["skinning_vertex"],THREE.ShaderChunk["project_vertex"],THREE.ShaderChunk["logdepthbuf_vertex"],"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk["worldpos_vertex"],THREE.ShaderChunk["envmap_vertex"],THREE.ShaderChunk["lights_phong_vertex"],THREE.ShaderChunk["shadowmap_vertex"],"}"].join("\n")};
